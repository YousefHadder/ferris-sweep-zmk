/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define ALL LA(LS(LG(LCTRL)))

&mt {
    quick-tap-ms = <175>;
    require-prior-idle-ms = <100>;
    flavor = "balanced";
    hold-trigger-on-release;
    hold-trigger-key-positions = <1 2 3 6 7 8 31 0 9>;
};

&key_repeat {
};

/ {
    behaviors {
        // Mod-tap with tap-preferred behavior and quick-tap settings that enable repeat

        mt_repeat: mt_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 6 7 8 31 0 9>;
            bindings = <&kp>, <&kp>;
        };

        // Layer-tap with tap-preferred behavior and quick-tap settings that enable repeat

        lt_repeat: lt_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <30 33>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        Backslash {
            bindings = <&kp BSLH>;
            key-positions = <8 9>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <28 29>;
        };

        Quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <18 19>;
        };

        Tmux {
            bindings = <&kp LC(B)>;
            key-positions = <10 11>;
        };

        Lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 4>;
        };

        Rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <5 6>;
        };

        Lbrack {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <13 14>;
        };

        Rbrack {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <15 16>;
        };

        Lcurly {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
        };

        Rcurly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&mt_repeat LEFT_ALT Q  &mt_repeat LEFT_SHIFT W  &mt_repeat LEFT_CONTROL E  &mt_repeat LEFT_GUI R   &kp T          &kp Y    &mt_repeat LEFT_GUI U  &mt_repeat LEFT_CONTROL I  &mt_repeat LEFT_SHIFT O  &mt_repeat LEFT_ALT P
&kp A                  &kp S                    &kp D                      &kp F                   &kp G          &kp H    &kp J                  &kp K                      &kp L                    &kp SEMI
&lt_repeat 1 Z         &kp X                    &kp C                      &kp V                   &kp B          &kp N    &kp M                  &kp COMMA                  &kp DOT                  &kp SLASH
                                                                           &lt_repeat 2 BACKSPACE  &mt ALL ESC    &kp RET  &lt_repeat 3 SPACE
            >;
        };

        layer_1 {
            bindings = <
&kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_PREV     &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_VOL_DN      &kp C_MUTE            &kp C_VOL_UP    &none              &kp BACKSLASH
&none                 &none                 &none          &kp LC(LA(F))     &none         &kp LEFT          &kp DOWN              &kp UP          &kp RIGHT          &kp SQT
&trans                &trans                &kp LA(LC(C))  &trans            &trans        &kp LA(LC(LEFT))  &kp LA(LC(DOWN))      &kp LA(LC(UP))  &kp LA(LC(RIGHT))  &kp GRAVE
                                                           &trans            &kp SPACE     &kp LA(LC(RET))   &kp LA(LC(LG(LEFT)))
            >;
        };

        layer_2 {
            bindings = <
&kp N1     &mt_repeat LEFT_SHIFT N2  &mt_repeat LEFT_CONTROL N3  &mt_repeat LEFT_GUI N4  &kp N5       &kp N6   &mt_repeat RIGHT_GUI N7  &mt_repeat RIGHT_CONTROL N8  &mt_repeat RIGHT_SHIFT N9  &kp N0
&kp EQUAL  &kp MINUS                 &kp SQT                     &kp LC(B)               &trans       &none    &none                    &none                        &none                      &none
&mo 1      &trans                    &trans                      &trans                  &trans       &none    &none                    &kp COMMA                    &kp PERIOD                 &none
                                                                 &trans                  &kp SPACE    &kp RET  &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp LS(N1)    &kp LS(N2)    &kp LS(N3)      &kp LS(N4)        &kp LS(N5)      &kp LS(N6)  &kp LS(N7)         &kp LS(N8)       &kp LS(N9)  &kp MINUS
&none         &none         &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LPAR        &kp RPAR    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &none       &kp EQUAL
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3      &bt BT_SEL 4    &none       &trans             &trans           &trans      &bt BT_CLR_ALL
                                            &trans            &trans          &trans      &trans
            >;
        };
    };
};
